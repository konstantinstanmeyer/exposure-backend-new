import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { setError } from '@/features/auth/authSlice'
import axios from 'axios'
import Loading from '../components/Loading'
import { AppDispatch, RootState } from '../src/store'
import validate from '@/util/validateUser';
import { useRouter } from 'next/router'
import Link from 'next/link'
import { Category } from '@/types/global'

export default function Home() {
  const [isLoading, setIsLoading] = useState<Boolean>(false);
  const [categories, setCategories] = useState<Array<Category>>([]);

  const username = useSelector((state: RootState) =>  state.auth.username);
  const token = useSelector((state: RootState) =>  state.auth.token);

  const dispatch = useDispatch<AppDispatch>();

  const router = useRouter();

  useEffect(() => {
    setIsLoading(true);

    if(username && token) {
      getCategories();
    } else if (validate(dispatch)) {
      getCategories();
    } else {
      router.push('/login');
    }

    return () => {
      // nothing
    }
  }, [])

  function getCategories(){
    axios.get<Category[]>('http://localhost:3001/categories', { headers: { "Authorization" : `Bearer ${localStorage.getItem('token')}`}})
    .then(res => {
      setCategories(res.data);
      setIsLoading(false);
    })
    .catch(err => {
      if (err.response.data.message){
        router.push('/login')
      }
      else dispatch(setError(err.response))
    });
  }

  return (
    <>
      <Head>
        <title>Exposure</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative">
        {isLoading ? <Loading /> : 
          <div className="grid xl:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 gap-6 w-3/5 mx-auto mt-32">
            {categories && !isLoading ? categories.map((c, i) =>     
              <Link key={c.name + i.toString()} href={`/category/${c.name}`} className={`bg-gray-gray-900 transitional-all duration-300 hover:opacity-60 h-72 flex items-center justify-center relative w-64 rounded-md mx-auto ${isLoading ? "animate-pulse" : null}`}>
               <img className="h-full w-full object-cover rounded-md" src={`${c.imageUrl}`}/>
                <div className="bg-white/30 backdrop-blur-md absolute w-32 min:h-5 rounded-md">
                  <p className="font-bold text-center mx-3 break-all py-1">{`${c.name}`}</p>
                </div>
              </Link> 
            ) : null}
          </div>
        }
      </div>
    </>
  )
}
